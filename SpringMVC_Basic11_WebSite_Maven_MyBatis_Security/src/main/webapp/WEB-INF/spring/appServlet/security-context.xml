<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:security="http://www.springframework.org/schema/security"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 					http://www.springframework.org/schema/beans/spring-beans.xsd
  					http://www.springframework.org/schema/security
  					http://www.springframework.org/schema/security/spring-security.xsd">
  
 
<!-- 

	1. 인증과 권한(in-memory 방식으로 사용자 만들고 권한 설정 TEST)
		권한 허락에 대한 표현이 버전별로 상이하다
		role에 대한 설정이 3.x.x 버전은 access="ROLE_USER"
					   4.x.x 버전은 access= hasRole()   - 이런 함수로 바뀌었다
		인증 권한(로그인 페이지, 로그인 처리) 직접 구현 - Sprign에서는 코딩 없이 자동화 가능
		auto-config='true'일 경우 login 관련된 모든 처리를 자동화 할 수 있다
		disabled='true' = csrf token(데이터를 주고 받을 때 원래 요청한 사용자가 맞는지 확인하기 위해 주고 받는 암호화된 문자열 코드) 자동 생성 억제 코드
							>> 만들어야 하는 것이 맞지만, 초보가 연습하기에 코드가 너무 복잡해져서 처음엔 생성하지 않는다
 --> 
 
	<!-- 1단계 기본 코드 
 	<security:http auto-config="true">
 		<security:csrf disabled="true"/>
 		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
 		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
 	</security:http>
 	
 	<security:authentication-manager>
 		<security:authentication-provider>
 			<security:user-service>
 				 메모리에서 사용할 계정을 만드는 것 DB가 없어도 있는 것처럼 넣는것 
 				<security:user name="hong" password="1004" authorities="ROLE_USER"/>
 				
 				 이렇게 하면 admin은 ROLE_ADMIN, ROLE_USER 이렇게 두 가지 role을 가지게 된다 
 				<security:user name="admin" password="1004" authorities="ROLE_ADMIN,ROLE_USER"/>
 			</security:user-service>
 		</security:authentication-provider>
 	</security:authentication-manager>
 	-->
 	<!-- 
 	
 		<form name="f" action="/SpringMVC_Basic09/login" method="POST">
 		-> /login 요청 인증처리 - Spring 내부적으로 주현된 Controller에 특정 method 동작
 		-> /login?error 요청 실패
 		-> 자동화 전제
 		-> <input type="text" name="username" value="">, <input type="password" name="password" />
 		-> /loginn 요청 Controller 특정 함수 동작 -> id, pwd 받아서 검증확인(authentication-provider) -> in-memory
 		-> 인증 되었다면 session 생성
 		-> /login?error
 		-> 로그아웃 : /logout -> 자동 세션 소멸 처리(개발자가 직접 구현하지 않아도 된다)
 		
 		즉 1단계에서는 intercepter에 대한 부분과 in-memory 방식으로 테스트 계정을 만드는 정도만 직접 구현한 것
 	 -->
 	 
 	 
 	 <!-- 2단계 코드
 	 
 	 	login 페이지 처리
		​
		>>form-login 속성 정의하기
		login-page : login form 페이지 URL
		username-parameter : form id의 name 속성값 (email >> id)
		password-parameter : form pw의 name 속성값
		login-processing-url : form action 값 (security를 이용해 인증처리)
		default-target-url : 로그인 성공 시 이동 URL
		authentication-failure-url : 로그인 실패 시 이동 URL
		always-use-default-target : true 로 하면 무조건 default-target-url 로 이동한다.
		false 로 하면 authentication-success-handler 대로 redirect 된다.
		authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력
		만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋겠다.
		res.sendRedirect 등으로 처리
		authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력
		​
		>> security:logout
		logout-url : 로그아웃 처리할 URL (security가 알아서 만들기 때문에, 이 경로로 요청만 하면된다)
		logout-success-url : 로그아웃 성공 시 이동 URL
		success-handler-ref : 로그아웃 성공 시 프로세스 정의, bean id 입력
		invalidate-session : 로그아웃 시 세션 삭제여부
		​
		>>session-management
		invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
		max-sessions : 최대 허용 가능한 세션 수
		expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
		error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)
		​
		아래 처리 한다고 해서 
		login 처리 직접 하는 것은 아니다
		​
		**
		/login 요청 처리는 여전히 spring 위임하고 있다 .....
		기본적인 요청 주소 , parametre 값은 정해진 대로 
 	 
 	 
 	 
 	  	<security:http auto-config="true">
 		<security:csrf disabled="true"/>
 		 authentication-failure-url : 인증 실패 url  
 		<security:form-login login-page="/joinus/login.htm"						
 							authentication-failure-url="/joinus/login.htm?error" />
 		<security:logout   logout-success-url="/index.htm" />  
 		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
 		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
 	</security:http>
 	
 	<security:authentication-manager>
 		<security:authentication-provider>
 			<security:user-service>

 				<security:user name="hong" password="1004" authorities="ROLE_USER"/>
 				
 				<security:user name="admin" password="1004" authorities="ROLE_ADMIN,ROLE_USER"/>
 			</security:user-service>
 		</security:authentication-provider>
 	</security:authentication-manager>
 	 -->
 	 
 	 
 	<!--  -->
 	<security:http auto-config="true">
 		<security:csrf disabled="true"/>
 		<!-- authentication-failure-url : 인증 실패 url 
 			default-target-url : 
 		--> 
 		<security:form-login default-target-url="/index.htm" 
 							login-page="/joinus/login.htm"						
 							authentication-failure-url="/joinus/login.htm?error" />
 		<security:logout   logout-success-url="/index.htm" />  
 		  <security:intercept-url pattern="/customer/*Reg.htm" access="hasRole('ROLE_USER')" />
  		  <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
 	</security:http>
 	
 	<security:authentication-manager>
 		<security:authentication-provider>
 		<!-- 이건 in-memory 방식이고 이제 jdbc가 제공하는 db연동을 이용할거니까 주석처리 
 			<security:user-service>
 				<security:user name="hong" password="1004" authorities="ROLE_USER"/> 				
 				<security:user name="admin" password="1004" authorities="ROLE_ADMIN,ROLE_USER"/>
 			</security:user-service>-->
 			
 			<security:jdbc-user-service data-source-ref="driverManagerDataSource"
 										users-by-username-query="SELECT userid, pwd AS password, 1 enabled FROM MEMBER WHERE userid=?"
 										authorities-by-username-query="SELECT m.userid, r.role_name FROM MEMBER m JOIN roll r ON m.userid=r.userid WHERE m.userid=?" />

 			
 		</security:authentication-provider>
 	</security:authentication-manager>
 	 
  
</beans>