<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context 
	   http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 
		java코드
		MonitorViewer viewer = new MonitorViewer();
		Recorder recorder = new Recorder();	
		viewer.setRecorder(recorder);
	

	1단계 : xml  
	<bean id="recorder"  class="DI_Annotation_01.Recorder"></bean>
	  <bean id="monitorViewer"  class="DI_Annotation_01.MonitorViewer">
	  		<property name="recorder">
	  				<ref  bean="recorder" />
	  		</property>
	  </bean>
	  
	  
	@Autowired > Type기반(IOC 컨테이너 안에 같은 타입이 있다면 그 주소값을 주입하는 방식)
	목적 : 의존관계를 자동설정할 때 사용하며 [타입을 이용]하여 의존하는 객체를 삽입해 준다. 
	그러므로 (IOC Container) 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 
	스프링은 예외를 발생시키게 된다.​

	설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
	
	@Autowired 가 동작하기 위해서는 선행객체가 필요하다 바로 아래에 적은 이름이 긴 객체
	import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;
	이 객체가 IOC 컨테이너 안에 생성이 되어 있어야, 자바로 치면
	new AutowiredAnnotationBeanPostProcessor();
	가 되어 있어야 @Autowired를 사용할 수 있다는 것! *추가설정이 바로 이 의미다
	
	*추가설정 : AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다.(컨테이너 안에 저 객체가 있어야 한다)
	그런데 인간적으로 너무 길다 그래서 대안으로 아래 코드를 사용
	 
	대신 <context:annotation-config /> 태그를 사용해도 된다.
	어노테이션에 필요한 bean 객체를 전부 메모리에 올리겠다는 뜻
	간편하다는 장점이 있지만
	일단 무조건 메모리에 올리고 보기 때문에 현재 사용하지 않는 객체까지 올려서 무겁다
	하지만 사용한다
	
	Caused by: java.lang.ClassNotFoundException: org.springframework.aop.TargetSource 에러 발생
	@Autowired 동작시 내부적으로 AOP 필요
	
	
	***@Autowired가 정상적으로 동작하지 않는 경우!
	  1. injection되는 타입 객체(bean)이 IOC 컨테이너에 없는 경우
	  org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [DI_Annotation_01.Recorder] found for dependency
	  : expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}
	  
	  2. 같은 타입의 객체가 IOC 안에 여러 개 있다면
	  <bean id="a"  class="DI_Annotation_01.Recorder"></bean>	  
	  <bean id="b"  class="DI_Annotation_01.Recorder"></bean>	  
	  <bean id="c"  class="DI_Annotation_01.Recorder"></bean>
	  이런 식으로
	  
	   org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [DI_Annotation_01.Recorder] is defined
	   : expected single matching bean but found 3: a,b,c
	   
	   !!IOC 컨테이너 안에 같은 타입의 객체가 여러 개 존재하더라도 Exception이 발생하지 않는 경우도 있다!!
	   bean의 ID값이 setter함수의 멤버필드명과 동일하다면 자동주입이 성공한다
	   사실 이런 경우에는 @Autowired가 아니라 @Resource(by name)을 사용하는 것이 원칙이다
	   
	   -->
	  <context:annotation-config />
	  <!--  --><bean id="recorder"  class="DI_Annotation_01.Recorder"></bean>
	  <bean id="monitorViewer"  class="DI_Annotation_01.MonitorViewer"></bean>
	  
	  <!-- 아래 세 객체는 모두 같은 타입이다 이 셋 중 어떤 것이 주입될까? 그건 spring도 모른다-->
	  <bean id="a"  class="DI_Annotation_01.Recorder"></bean>	  
	  <bean id="b"  class="DI_Annotation_01.Recorder"></bean>	  
	  <bean id="c"  class="DI_Annotation_01.Recorder"></bean>
	   
</beans>



